#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('sso:server');
const http = require('http');
const models = require("../models");
const { Server } = require('socket.io');
const { authSocket } = require('../sockets/index');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '8000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);



/**
 * Listen on provided port, on all network interfaces.
 */
// models.sequelize
//     .query('SET FOREIGN_KEY_CHECKS = 0', null, { raw: true })
//     .then(function (results) {
//         models.sequelize.sync({ alter: true });
//     });

models.sequelize.authenticate().then(function () {
  server.listen(port, () => {
    console.log('listening on http://localhost:8000');
  });
  server.on("error", onError);
  server.on("listening", onListening);
}).catch(err => console.log(err));

const io = new Server(server, {
  maxHttpBufferSize: 1e7
})

io.on('connection', (socket) => {
  authSocket(io, socket)
})

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
